{"$schema":"https://dataexplorer.azure.com/static/d/schema/63/dashboard.json","id":"75a1a36e-573a-4520-b6fd-22885e35c382","eTag":"a522c130-25c8-4382-9e77-893a7ce29075","title":"Dataverse Throttling Dashboard","schema_version":63,"tiles":[{"id":"df1735a3-03d4-4f55-9d4f-0f327646ed17","title":"Throttles over time (with average delay)","visualType":"table","pageId":"ccace7b9-429a-40d3-ac32-048fa7acd045","layout":{"x":0,"y":0,"width":5,"height":7},"queryRef":{"kind":"query","queryId":"56699f28-f01c-4019-8066-a3cbbe645f94"},"visualOptions":{"table__enableRenderLinks":true,"colorRulesDisabled":true,"crossFilterDisabled":false,"drillthroughDisabled":false,"crossFilter":[],"drillthrough":[],"table__renderLinks":[],"colorRules":[]}},{"id":"11fbcf06-ac44-4e91-9369-5e108bc460e1","title":"Top throttled queries (by hash)","visualType":"table","pageId":"ccace7b9-429a-40d3-ac32-048fa7acd045","layout":{"x":5,"y":0,"width":9,"height":7},"queryRef":{"kind":"query","queryId":"6c8b73a2-a2f2-4f8e-b2e1-013594f5392a"},"visualOptions":{"table__enableRenderLinks":true,"colorRulesDisabled":true,"crossFilterDisabled":false,"drillthroughDisabled":false,"crossFilter":[],"drillthrough":[],"table__renderLinks":[],"colorRules":[]}},{"id":"9b6165f0-92d2-4e8f-87c7-b7bfa9152c10","title":"Top Reasons For Throttling","visualType":"table","pageId":"ccace7b9-429a-40d3-ac32-048fa7acd045","layout":{"x":14,"y":0,"width":9,"height":7},"queryRef":{"kind":"query","queryId":"d3d7a3f0-fc36-4312-8bce-524d9fbf84cb"},"visualOptions":{"table__enableRenderLinks":true,"colorRulesDisabled":true,"crossFilterDisabled":false,"drillthroughDisabled":false,"crossFilter":[],"drillthrough":[],"table__renderLinks":[],"colorRules":[]}},{"id":"3274bf7c-2d07-4d74-99d6-914047643cc7","title":"Delay distribution & percentiles","visualType":"table","pageId":"ccace7b9-429a-40d3-ac32-048fa7acd045","layout":{"x":0,"y":7,"width":9,"height":7},"queryRef":{"kind":"query","queryId":"9d800ebd-8035-46ba-957d-a5d9ab4282aa"},"visualOptions":{"table__enableRenderLinks":true,"colorRulesDisabled":true,"crossFilterDisabled":false,"drillthroughDisabled":false,"crossFilter":[],"drillthrough":[],"table__renderLinks":[],"colorRules":[]}},{"id":"928d813f-f127-4b88-8335-be042549f84d","title":"“Hot windows”: sudden spikes","visualType":"table","pageId":"ccace7b9-429a-40d3-ac32-048fa7acd045","layout":{"x":9,"y":7,"width":9,"height":7},"queryRef":{"kind":"query","queryId":"57851ccb-34f2-4665-acea-7dc2b22afb81"},"visualOptions":{"table__enableRenderLinks":true,"colorRulesDisabled":true,"crossFilterDisabled":false,"drillthroughDisabled":false,"crossFilter":[],"drillthrough":[],"table__renderLinks":[],"colorRules":[]}},{"id":"6edbdb2f-bc65-443e-bcfc-6a147467d442","title":"Callers / operations most affected","visualType":"table","pageId":"ccace7b9-429a-40d3-ac32-048fa7acd045","layout":{"x":0,"y":14,"width":9,"height":7},"queryRef":{"kind":"query","queryId":"66bb13e3-2afc-444a-985c-cd69958d29d5"},"visualOptions":{"table__enableRenderLinks":true,"colorRulesDisabled":true,"crossFilterDisabled":false,"drillthroughDisabled":false,"crossFilter":[],"drillthrough":[],"table__renderLinks":[],"colorRules":[]}},{"id":"71a625ee-71a9-4f3a-ad38-2fd1bb32dc6c","title":"Recent detailed samples (for investigation)","visualType":"table","pageId":"ccace7b9-429a-40d3-ac32-048fa7acd045","layout":{"x":9,"y":14,"width":9,"height":7},"queryRef":{"kind":"query","queryId":"7a90dc2c-2c76-4f43-bff3-d2e17924c4f7"},"visualOptions":{"table__enableRenderLinks":true,"colorRulesDisabled":true,"crossFilterDisabled":false,"drillthroughDisabled":false,"crossFilter":[],"drillthrough":[],"table__renderLinks":[],"colorRules":[]}},{"id":"1338f63e-db47-46a0-97de-cd3a72a8866a","title":"Environment / org breakdown (multi-tenant teams)","visualType":"table","pageId":"ccace7b9-429a-40d3-ac32-048fa7acd045","layout":{"x":0,"y":21,"width":9,"height":7},"queryRef":{"kind":"query","queryId":"1a99681b-5649-4401-921a-999968ef6be5"},"visualOptions":{"table__enableRenderLinks":true,"colorRulesDisabled":true,"crossFilterDisabled":false,"drillthroughDisabled":false,"crossFilter":[],"drillthrough":[],"table__renderLinks":[],"colorRules":[]}}],"baseQueries":[{"id":"74cb8d13-c665-4431-b17e-9fbbdc3ca3ba","queryId":"db54962c-a15f-472e-aa7f-d5040959cfdd","variableName":"DataverseThrottle"}],"parameters":[{"kind":"duration","id":"78d32b2e-3489-4a11-90d8-9bcc933ec7f0","displayName":"Time range","description":"","beginVariableName":"_startTime","endVariableName":"_endTime","defaultValue":{"kind":"dynamic","count":1,"unit":"hours"},"showOnPages":{"kind":"all"}}],"dataSources":[{"id":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d","kind":"manual-kusto","scopeId":"kusto","name":"DV Throttling","clusterUri":"https://ade.applicationinsights.io/subscriptions/<SubscriptionId>/resourcegroups/<ResourceGroupName>/providers/microsoft.insights/components/<AppInsightsName>","database":"FranceEnvThrottlingTest"}],"pages":[{"name":"DV Throttling","id":"ccace7b9-429a-40d3-ac32-048fa7acd045"}],"queries":[{"dataSource":{"kind":"inline","dataSourceId":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d"},"text":"DataverseThrottle\n| summarize Throttles = count(), AvgDelayMs = avg(delayMs) by bin(timestamp, 1h)\n| order by timestamp asc\n","id":"56699f28-f01c-4019-8066-a3cbbe645f94","usedVariables":["DataverseThrottle"]},{"dataSource":{"kind":"inline","dataSourceId":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d"},"text":"DataverseThrottle\n| summarize Throttles = count(), AvgDelayMs = round(avg(delayMs),1),\n            AnySampleCommand = take_any(command)\n          by cdsQueryHash\n| top 15 by Throttles desc\n","id":"6c8b73a2-a2f2-4f8e-b2e1-013594f5392a","usedVariables":["DataverseThrottle"]},{"dataSource":{"kind":"inline","dataSourceId":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d"},"text":"DataverseThrottle\n| summarize Throttles = count() by tostring(reason)\n| top 10 by Throttles desc","id":"d3d7a3f0-fc36-4312-8bce-524d9fbf84cb","usedVariables":["DataverseThrottle"]},{"dataSource":{"kind":"inline","dataSourceId":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d"},"text":"DataverseThrottle\n| summarize\n    MinDelayMs = min(delayMs),\n    P50DelayMs = percentiles(delayMs, 50),\n    P90DelayMs = percentiles(delayMs, 90),\n    P95DelayMs = percentiles(delayMs, 95),\n    P99DelayMs = percentiles(delayMs, 99),\n    MaxDelayMs = max(delayMs)\n","id":"9d800ebd-8035-46ba-957d-a5d9ab4282aa","usedVariables":["DataverseThrottle"]},{"dataSource":{"kind":"inline","dataSourceId":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d"},"text":"// PURPOSE: Detect “hot windows” (spikes) in Dataverse query throttling.\n// HOW: Count throttling events per time bin, compute a 7-bin rolling average,\n//      and flag bins where the count is both (a) substantially above average\n//      and (b) above a minimum absolute level.\n//\n// PARAMETERS\nlet _lookback   = 7d;   // how far back to analyze\nlet _bin        = 1h;   // time-granularity for bucketing (change to 10m, 30m, etc.)\nlet _multiplier = 2.0;  // spike sensitivity: current > multiplier * moving average\nlet _minCount   = 5;    // ignore tiny blips below this absolute count\n// SOURCE\n// 'DataverseThrottle' should return one row per throttling signal (e.g., from traces/customEvents)\n// with a 'timestamp' column. Replace with your helper function/table as needed.\nDataverseThrottle\n// 1) Aggregate: count throttles per time bin\n| summarize Throttles = count() by timestamp = bin(timestamp, _bin)\n// 2) Order rows so prev() is well-defined\n| order by timestamp asc\n| serialize\n// 3) Bring in the previous 6 bins to build a 7-point window (current + 6 prev bins)\n| extend p1 = prev(Throttles, 1), p2 = prev(Throttles, 2), p3 = prev(Throttles, 3),\n         p4 = prev(Throttles, 4), p5 = prev(Throttles, 5), p6 = prev(Throttles, 6)\n// 4) Ensure we have a full window (drop the warm-up rows that don't)\n| where isnotnull(p6)\n// 5) Compute a simple moving average over the last 7 bins\n| extend MovingAvg =\n    (todouble(Throttles) + todouble(p1) + todouble(p2) +\n     todouble(p3) + todouble(p4) + todouble(p5) + todouble(p6)) / 7.0\n// 6) Spike rule: current bin is > multiplier × average AND above a minimum absolute size\n| where Throttles > _multiplier * MovingAvg and Throttles > _minCount\n// 7) Keep just what we need for visualization or alerting\n| project Window = timestamp, Throttles, MovingAvg\n","id":"57851ccb-34f2-4665-acea-7dc2b22afb81","usedVariables":["DataverseThrottle"]},{"dataSource":{"kind":"inline","dataSourceId":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d"},"text":"DataverseThrottle\n| summarize Throttles = count(), AvgDelayMs = avg(delayMs)\n          by coalesce(userId, opName, sessionId)\n| top 15 by Throttles desc\n","id":"66bb13e3-2afc-444a-985c-cd69958d29d5","usedVariables":["DataverseThrottle"]},{"dataSource":{"kind":"inline","dataSourceId":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d"},"text":"DataverseThrottle\n| project timestamp, reason, delayMs, probability, expiryTime,\n          opId, opName, userId,\n          Command = substring(command, 0, 800)\n| order by timestamp desc\n| take 100\n","id":"7a90dc2c-2c76-4f43-bff3-d2e17924c4f7","usedVariables":["DataverseThrottle"]},{"dataSource":{"kind":"inline","dataSourceId":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d"},"text":"DataverseThrottle\n| summarize Throttles = count(), AvgDelayMs = avg(delayMs) by tostring(environmentId), tostring(organization)\n| top 20 by Throttles desc\n","id":"1a99681b-5649-4401-921a-999968ef6be5","usedVariables":["DataverseThrottle"]},{"id":"db54962c-a15f-472e-aa7f-d5040959cfdd","dataSource":{"kind":"inline","dataSourceId":"6bc024fe-c2b3-4f76-b2c6-90f8aa593c1d"},"text":"union isfuzzy=true\n    (\n        traces\n        | where timestamp > ago(60d)\n        | where tostring(customDimensions.throttlingAction) =~ \"Throttle\"\n            or tostring(customDimensions.ThrottleAction) =~ \"Throttle\"\n    ),\n    (\n        customEvents\n        | where timestamp > ago(60d)\n        | where name =~ \"QueryThrottled\" or tostring(customDimensions.throttlingAction) =~ \"Throttle\"\n    )\n    | extend cd = todynamic(customDimensions)\n    | extend\n        command      = tostring(cd.Command),\n        cdsQueryHash  = tostring(cd.CdsQueryHash),\n        delayMs       = tolong(cd.throttlingDelayMilliseconds),\n        probability   = todouble(cd.throttleProbabilityPercentage),\n        reason        = tostring(cd.throttleReason),\n        expiryTime    = todatetime(cd.throttleExpiryTime),\n        environmentId = tostring(cd.environmentId),\n        organization  = tostring(cd.organizationUrl),\n        userId        = tostring(user_Id),\n        opId          = tostring(operation_Id),\n        opName        = tostring(operation_Name),\n        sessionId     = tostring(session_Id)\n    | project timestamp, command, cdsQueryHash, delayMs, probability, reason, expiryTime,\n              environmentId, organization, userId, opId, opName, sessionId, itemType","usedVariables":[]}]}